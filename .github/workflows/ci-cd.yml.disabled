# DISABLED - Using deploy.yml for GitHub Pages
# name: 🚀 CI/CD Pipeline - FitLog Website

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main ]
#   schedule:
#     # Executa testes de segurança diariamente às 2h
#     - cron: '0 2 * * *'

# env:
#   NODE_VERSION: '18'
#   PYTHON_VERSION: '3.9'

# jobs:
  # ========================================
  # ANÁLISE DE CÓDIGO E QUALIDADE
  # ========================================
  code-quality:
    name: 🔍 Análise de Qualidade
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Instalar dependências
        run: npm ci
      
      - name: 🔍 ESLint - Análise de código JavaScript
        run: npx eslint assets/js/ --ext .js --format json --output-file eslint-report.json || true
      
      - name: 🎨 Stylelint - Análise de CSS
        run: npx stylelint assets/css/ --format json --output-file stylelint-report.json || true
      
      - name: 📊 HTMLHint - Análise de HTML
        run: npx htmlhint index.html --format json --output-file htmlhint-report.json || true
      
      - name: 📈 Upload relatórios de qualidade
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-reports
          path: |
            eslint-report.json
            stylelint-report.json
            htmlhint-report.json

  # ========================================
  # TESTES AUTOMATIZADOS
  # ========================================
  tests:
    name: 🧪 Testes Automatizados
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Instalar dependências
        run: npm ci
      
      - name: 🧪 Instalar Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}
      
      - name: 🚀 Iniciar servidor local
        run: |
          python3 -m http.server 8000 &
          sleep 5
      
      - name: 🧪 Executar testes de acessibilidade
        run: npx playwright test tests/accessibility.test.js --project=${{ matrix.browser }}
      
      - name: 🧪 Executar testes de performance
        run: npx playwright test tests/performance.test.js --project=${{ matrix.browser }}
      
      - name: 🧪 Executar testes de funcionalidade
        run: npx playwright test tests/functionality.test.js --project=${{ matrix.browser }}
      
      - name: 📊 Upload relatórios de teste
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/

  # ========================================
  # TESTES DE SEGURANÇA
  # ========================================
  security:
    name: 🔒 Testes de Segurança
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Instalar dependências
        run: npm ci
      
      - name: 🔍 Audit de vulnerabilidades NPM
        run: npm audit --audit-level=moderate
      
      - name: 🛡️ Snyk - Análise de vulnerabilidades
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      
      - name: 🔒 Semgrep - Análise de segurança
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
      
      - name: 🌐 Lighthouse CI - Auditoria de segurança
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --upload.target=temporary-public-storage

  # ========================================
  # TESTES DE PERFORMANCE
  # ========================================
  performance:
    name: ⚡ Testes de Performance
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Instalar dependências
        run: npm ci
      
      - name: 🚀 Iniciar servidor local
        run: |
          python3 -m http.server 8000 &
          sleep 5
      
      - name: ⚡ Lighthouse CI - Auditoria de performance
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
      
      - name: 📊 WebPageTest - Teste de performance
        run: |
          curl -X POST "https://www.webpagetest.org/runtest.php" \
            -d "url=http://localhost:8000" \
            -d "key=${{ secrets.WEBPAGETEST_API_KEY }}" \
            -d "runs=3" \
            -d "f=json" \
            -d "video=1" \
            -d "private=1"

  # ========================================
  # TESTES DE ACESSIBILIDADE
  # ========================================
  accessibility:
    name: ♿ Testes de Acessibilidade
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Instalar dependências
        run: npm ci
      
      - name: 🧪 Instalar Playwright
        run: npx playwright install --with-deps chromium
      
      - name: 🚀 Iniciar servidor local
        run: |
          python3 -m http.server 8000 &
          sleep 5
      
      - name: ♿ axe-core - Auditoria de acessibilidade
        run: npx playwright test tests/accessibility.test.js --project=chromium
      
      - name: 📊 Pa11y - Teste de acessibilidade
        run: |
          npm install -g pa11y-ci
          pa11y-ci --sitemap http://localhost:8000/sitemap.xml
      
      - name: 📈 Upload relatórios de acessibilidade
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-reports
          path: |
            test-results/
            pa11y-reports/

  # ========================================
  # BUILD E OTIMIZAÇÃO
  # ========================================
  build:
    name: 🏗️ Build e Otimização
    runs-on: ubuntu-latest
    needs: [tests, security, performance, accessibility]
    steps:
      - name: 📥 Checkout código
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📦 Instalar dependências
        run: npm ci
      
      - name: 🖼️ Otimizar imagens
        run: |
          npm install -g imagemin-cli imagemin-webp imagemin-avif
          imagemin assets/images/*.{jpg,png} --out-dir=dist/images --plugin=webp
          imagemin assets/images/*.{jpg,png} --out-dir=dist/images --plugin=avif
      
      - name: 🎨 Minificar CSS
        run: |
          npm install -g clean-css-cli
          cleancss -o dist/css/main.min.css assets/css/main.css
          cleancss -o dist/css/design-system.min.css assets/css/design-system.css
      
      - name: 📜 Minificar JavaScript
        run: |
          npm install -g terser
          terser assets/js/main.js -o dist/js/main.min.js -c -m
          terser assets/js/image-optimizer.js -o dist/js/image-optimizer.min.js -c -m
          terser assets/js/accessibility-manager.js -o dist/js/accessibility-manager.min.js -c -m
          terser assets/js/performance-monitor.js -o dist/js/performance-monitor.min.js -c -m
      
      - name: 📄 Minificar HTML
        run: |
          npm install -g html-minifier-terser
          html-minifier-terser index.html -o dist/index.html \
            --remove-comments \
            --remove-redundant-attributes \
            --remove-script-type-attributes \
            --remove-style-link-type-attributes \
            --use-short-doctype \
            --minify-css \
            --minify-js
      
      - name: 📊 Gerar sitemap
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>' > dist/sitemap.xml
          echo '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' >> dist/sitemap.xml
          echo '  <url>' >> dist/sitemap.xml
          echo '    <loc>https://fitlog.com.br/</loc>' >> dist/sitemap.xml
          echo '    <lastmod>$(date -u +%Y-%m-%dT%H:%M:%S+00:00)</lastmod>' >> dist/sitemap.xml
          echo '    <changefreq>weekly</changefreq>' >> dist/sitemap.xml
          echo '    <priority>1.0</priority>' >> dist/sitemap.xml
          echo '  </url>' >> dist/sitemap.xml
          echo '</urlset>' >> dist/sitemap.xml
      
      - name: 📈 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

  # ========================================
  # DEPLOY PARA STAGING
  # ========================================
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: 🚀 Deploy para Netlify Staging
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './dist'
          production-deploy: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy automático - Staging - ${{ github.sha }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_STAGING }}

  # ========================================
  # DEPLOY PARA PRODUÇÃO
  # ========================================
  deploy-production:
    name: 🌟 Deploy Produção
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: 🚀 Deploy para Netlify Produção
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './dist'
          production-deploy: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy automático - Produção - ${{ github.sha }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_PRODUCTION }}
      
      - name: 📧 Notificar deploy
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # ========================================
  # MONITORAMENTO PÓS-DEPLOY
  # ========================================
  post-deploy-monitoring:
    name: 📊 Monitoramento Pós-Deploy
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: 🚀 Iniciar monitoramento
        run: |
          echo "Iniciando monitoramento pós-deploy..."
          # Aqui você pode adicionar scripts de monitoramento
          # como verificações de saúde, testes de smoke, etc.
      
      - name: 📈 Lighthouse CI - Verificação pós-deploy
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # ========================================
  # NOTIFICAÇÕES
  # ========================================
  notify:
    name: 📢 Notificações
    runs-on: ubuntu-latest
    needs: [code-quality, tests, security, performance, accessibility, build]
    if: always()
    steps:
      - name: 📧 Notificar resultado do pipeline
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow